name: Do Linux nightly Companion

on:
  schedule:
     - cron:  '20 23 * * *'
     
  workflow_dispatch:  
     
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Init
      run: sudo apt update
      
    - name: Install dependencies
      run: sudo apt-get -y install build-essential cmake gcc git lib32ncurses5 lib32z1 libfox-1.6-dev libsdl1.2-dev
          qt5-default qtmultimedia5-dev qttools5-dev qttools5-dev-tools libqt5svg5-dev
          software-properties-common wget zip libgtest-dev libclang1-7 python3-pip
          
    - name: Install cross compiler
      run: wget -q https://launchpad.net/gcc-arm-embedded/4.7/4.7-2013-q3-update/+download/gcc-arm-none-eabi-4_7-2013q3-20130916-linux.tar.bz2 &&
          tar xjf gcc-arm-none-eabi-4_7-2013q3-20130916-linux.tar.bz2 &&
          mv gcc-arm-none-eabi-4_7-2013q3 /opt/gcc-arm-none-eabi &&
          export PATH=$PATH:/opt/gcc-arm-none-eabi/bin:/opentx/code/radio/util
          
    - name: Install pillow      
      run: python -m pip install filelock clang pillow
      
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_DEPLOYMENT_TARGET='10.9'

    - name: Build
      working-directory: ${{github.workspace}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: mkdir ${{github.workspace}}/output && tools/build-companion-nightly.sh ${{github.workspace}}  ${{github.workspace}}/output/
   
