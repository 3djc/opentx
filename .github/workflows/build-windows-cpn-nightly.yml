name: Do Windows nightly Companion

on: workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2016

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
      
    - name: Create pthreads programs directory
      run: mkdir "C:\Programs" &&
           mkdir "C:\Programs\pthreads"
      
    - name: download PThreads
      uses: suisei-cn/actions-download-file@v1
      id: pthreads  # Remember to give an ID if you need the output filename
      with:
        url: "https://www.mirrorservice.org/sites/sourceware.org/pub/pthreads-win32/pthreads-w32-2-8-0-release.exe"
        target: ${{github.workspace}}
      
    - name: extract PThreads
      run: 7z x "${{github.workspace}}\pthreads-w32-2-8-0-release.exe" -o"C:\Programs\pthreads" -y
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.9.9'
        host: 'windows'
        target: 'desktop'
        arch: 'win32_msvc2015'
        
    - name: Install dependencies
      run: python -m pip install --upgrade pip Pillow
      
    - name: Install ARM toolchain
      uses: fiam/arm-none-eabi-gcc@v1
      with:
        release: '6-2017-q2'   

    - name: download libSDL
      uses: suisei-cn/actions-download-file@v1
      id: downloadfile  # Remember to give an ID if you need the output filename
      with:
        url: "http://www.libsdl.org/release/SDL-devel-1.2.15-VC.zip"
        target: ${{github.workspace}}
             
    - name: Install libDSL
      run: 7z e SDL-devel-1.2.15-VC.zip -o"C:\Program Files" -y &&
            move "C:\Program Files\SDL-1.2.15" "C:\Program Files\SDL"
    
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: sh
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      
    - name: Build
      working-directory: ${{github.workspace}}
      shell: cmd
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: SET COMMON_OPTIONS=-G "Visual Studio 14" ../code/ -DCMAKE_PREFIX_PATH=C:\Qt\Qt5.12.9\5.12\msvc2019 -DALLOW_NIGHTLY_BUILDS=YES -DGVARS=YES -DHELI=YES -DLUA=YES -DMULTIMODULE=YES -DTELEMETRY=FRSKY -DPPM_LIMITS_SYMETRICAL=YES -DVARIO=YES -DGAUGES=YES -DAUTOSWITCH=YES -DAUTOSOURCE=YES -DAUDIO=YES -DGPS=YES -DPPM_CENTER_ADJUSTABLE=YES -DFLIGHT_MODES=YES -DOVERRIDE_CHANNEL_FUNCTION=YES -DFRSKY_STICKS=YES -DTRANSLATIONS=EN &&
          cmake -A win32 %COMMON_OPTIONS% -DPCB=X9E  ${{github.workspace}} &&
          msbuild radio\src\targets\simu\libsimulator.vcxproj /p:Configuration=Release
      
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
       name: companion-nightly
       path:  ${{github.workspace}}/output
       retention-days: 1

